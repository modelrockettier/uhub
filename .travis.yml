language: c
os: linux
dist: xenial
arch: amd64
compiler:
  - gcc
  - clang
env:
  - CONFIG=minimal
  - CONFIG=full

jobs:
  allow_failures:
    # Just in case we exceed the coverity scan limits
    - name: Coverity scan
    # vcpkg openssl has issues
#   - os: windows
#     env: CONFIG=full

  # Additional builds to do (outside the build matrix)
  include:

    # Windows builds
#   - name: Windows full
#     os: windows
#     env: CONFIG=full
#     cache:
#       directories:
#         - "$HOME/vcpkg-full"
    - name: Windows minimal
      os: windows
      env: CONFIG=minimal
      cache:
        directories:
          - "$HOME/vcpkg-minimal"

    # Mac OS X builds
    - name: Mac OSX full
      os: osx
      env: CONFIG=full
      addons:
        homebrew:
          packages:
          - cmake
          - openssl
          - sqlite
    - name: Mac OSX minimal
      os: osx
      env: CONFIG=minimal
      addons:
        homebrew:
          packages:
          - cmake
          - sqlite

    # 64-bit ARM builds
    - name: arm64 full
      arch: arm64
      env: config=full
    - name: arm64 minimal
      arch: arm64
      env: config=minimal

    # 64-bit Little-Endian PPC builds
    - name: ppc64le full
      arch: ppc64le
      env: config=full
    - name: ppc64le minimal
      arch: ppc64le
      env: config=minimal

    # s390x (big-endian) builds
    - name: s390x full
      arch: s390x
      env: config=full
    - name: s390x minimal
      arch: s390x
      env: config=minimal

    # Bionic builds
    - name: bionic full
      dist: bionic
      env: CONFIG=full
    - name: bionic minimal
      dist: bionic
      env: CONFIG=minimal

    # Debian package builds
    - name: debian package
      env: CONFIG=deb

    # Docker build
    - name: docker
      language: minimal
      services: docker
      env: CONFIG=docker

    # Coverity build
    - name: Coverity scan
      # The COVERITY_SCAN_TOKEN env var is set in the travis repository settings
      env: CONFIG=full
      branches:
        only:
          - master
          - coverity_scan
      # Don't build for pull requests or if the token isn't set
      if: |
          env(COVERITY_SCAN_TOKEN) IS present AND \
          type = push
      addons:
        coverity_scan:
          project:
            name: "modelrockettier/uhub"
            description: "Travis CI Build ${TRAVIS_COMMIT::8}"
          notification_email: "modelrockettier@users.noreply.github.com"
          build_command_prepend: "cmake . -DSSL_SUPPORT=1 -DSYSTEMD_SUPPORT=1 -DADC_STRESS=1"
          build_command: "make -j2"
          branch_pattern: master
      before_install:
        - |
          set -x
          echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-certificates.crt
          git fetch --unshallow origin 'refs/heads/*:refs/remotes/origin/*'
          true
      # override the build script
      script:
        - |
          set -x +e
          head -150 "${TRAVIS_BUILD_DIR}/cov-int/build-log.txt"
          tail -150 "${TRAVIS_BUILD_DIR}/cov-int/build-log.txt"
          cat "${TRAVIS_BUILD_DIR}/cov-int/scm_log.txt"
          true
    # End Coverity build

    # SonarCloud build
    - name: SonarCloud scan
      env: CONFIG=full
      branches:
        only:
          - master
          - staging
          - sonarcloud
      # Don't build for pull requests or if the token isn't set
      if: |
          env(SONAR_TOKEN) IS present AND \
          type = push
      addons:
        sonarcloud:
          organization: "modelrockettier"
          # Encrypted tokens had issues, so it's set in the repo settings
      # override the build script
      script:
        # Sonar needs an unshallow checkout for its source to work out properly
        - git fetch --unshallow origin 'refs/heads/*:refs/remotes/origin/*'
        # Prepare the build system
        - cmake . -DSSL_SUPPORT=ON -DSYSTEMD_SUPPORT=ON -DADC_STRESS=ON -DCOVERAGE=ON
        # Wraps the compilation with the Build Wrapper to generate config
        - build-wrapper-linux-x86-64 --out-dir bw-output cmake --build .
        # Run the tests
        - make test CTEST_OUTPUT_ON_FAILURE=1
        - mkdir cov
        - cd cov
        - find .. -iname '*.gc?*' -exec gcov -a -b -c -u -l {} +
        - cd ..
        # Run the SonarQube analysis
        - >
          sonar-scanner \
            -Dsonar.cfamily.build-wrapper-output=bw-output \
            -Dsonar.cfamily.gcov.reportsPath=cov \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.cfamily.cache.enabled=true \
            -Dsonar.cfamily.cache.path="$HOME/.sonar/cache"
      cache:
        directories:
          - "$HOME/.sonar/cache"
    # End SonarCloud build

install:
  - autotest/ci/install-build-depends.sh
script:
  - autotest/ci/build-and-test.sh
